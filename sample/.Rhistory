list.files(path = "../R", pattern = "*.R")
for(i in (list.files(path = "../R", pattern = "*.R")) source(i)
for(i in list.files(path = "../R", pattern = "*.R")) source(i)
?source
sourceDir <- function(path, trace = TRUE, ...){
for(i in list.files(path, pattern = ".R")){
if(trace) cat(i, ":")
source(file.path(path, i), ...)
if(trace) cat("\n")
}
}
sourceDir("../R")
View(fb.api.data)
rm(fb.api.data)
param_list
param_list list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-06-30", period="day")
param_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-06-30", period="day")
param_list
param_list <- c(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-06-30", period="day")
param_list <- c(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-06-30", period="day")
param_list
param_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-06-30", period="day")
fb.data(param_list, TRUE, TRUE)
dat <- fb.data(param_list, FALSE, FALSE)
fb.matrix(dat)
impressions <- fb.matrix(dat)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-06-01", until="2016-06-30", period="day")
dat2 <- fb.data(str_list, FALSE, FALSE)
dat2
stories <- fb.matrix(dat2)
stories
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, FALSE, FALSE)
impressions <- fb.matrix(dat)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-06-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, FALSE, FALSE)
stories <- fb.matrix(dat2)
stores
stories
str_list <- list(metric="page_storytellers_by_age_gender", period="lifetime")
dat2 <- fb.data(str_list, FALSE, FALSE)
stories <- fb.matrix(dat2)
str_list <- list(metric="page_storytellers_by_age_gender", period="lifetime")
dat2 <- fb.data(str_list, FALSE, FALSE)
fb.data
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
return(dat)
}
dat2 <- fb.data(str_list, FALSE, FALSE)
dat2
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
return(dat$data[[1]]$values)
}
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, FALSE, FALSE)
impressions <- fb.matrix(dat)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-06-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, FALSE, FALSE)
stories <- fb.matrix(dat2)
stories
str_list <- list(metric="page_storytellers_by_age_gender", since="2015-06-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, FALSE, FALSE)
stories <- fb.matrix(dat2)
str_list <- list(metric="page_storytellers_by_age_gender", since="2015-06-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, TRUE, TRUE)
dat2 <- fb.data(str_list, F, F)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-06-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-05-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-01-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
stories
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-01-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-05-01", until="2016-06-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
View(stories)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-04-01", until="2016-05-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-04-01", until="2016-05-30", period="day")
dat2 <- fb.data(str_list, F, F)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-06-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
fb.matrix(fb.data(imp_list, F,F))
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-07-30", period="day")
fb.matrix(fb.data(plc_list, F,F))
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-30", period="day")
fb.matrix(fb.data(plc_list, F,F))
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-2", period="day")
fb.matrix(fb.data(plc_list, F,F))
token
auth[2]
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
# add something to verify that I get dat$data and not dat$error
return(dat)
}
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, FALSE, FALSE)
dat
if ("error" %in% levels(dat)) print("broke!") else print("ok!")
test = list(error=c(1), data=c(1,2,3))
if ("error" %in% levels(test)) print("broke!") else print("ok!")
if ("error" %in% levels(test)){
print("broke!")
} else print("ok!")
levesl(test)
leves(test)
levels(test)
test
if ("error" %in% names(test)){
print("broke!")
} else print("ok!")
if ("error" %in% names(dat)){
print("broke!")
} else print("ok!")
names(dat)
if ("error" %in% names(dat)){
print("broke!")
} else {
print("ok!")
}
if ("error" %in% names(test)){
print("broke!")
} else {
print("ok!")
}
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
# add something to verify that I get dat$data and not dat$error
if("error" %in% names(dat)){
return(dat$error[['message']])
} else return(dat$data[[1]]$values)
}
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-05-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
stories
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-01-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-2", period="day")
fb.matrix(fb.data(plc_list, F,F))
length(dat$data)
dat$data
dat3 <- fb.data(plc_list, F,F)
dat3
test <- list(data=NULL, this=c(1,2,3))
test
length(test$data)
if (length(test$data < 1)){
print("broke!")
} else {
print("ok!")
}
if (length(test$data > 1)){
print("broke!")
} else {
print("ok!")
}
if (length(test$data > 1)){
print("broke!")
} else {
print("ok!")
}
if (length(test$data) < 1){
print("broke!")
} else {
print("ok!")
}
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
# add something to print the error message I get for 1. bad requests and 2. no results
if (length(test$data) < 1){
print("broke!")
} else {
print("ok!")
}
return(dat$data[[1]]$values)
}
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-2", period="day")
dat3 <- fb.data(plc_list, F,F)
# Accesses graph api and gets data for specified parameters.
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
# add something to print the error message I get for 1. bad requests and 2. no results
if (length(test$data) < 1){
message("Query returned no results. Try adjusting your time period. ")
} else {
return(dat$data[[1]]$values)
}
}
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-2", period="day")
dat3 <- fb.data(plc_list, F,F)
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, FALSE, FALSE)
impressions <- fb.matrix(dat)
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, FALSE, FALSE)
impressions <- fb.matrix(dat)
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, TRUE, TRUE)
dat
dat2
length(dat2$dat)
dat2
dat2
length(dat2)
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
# add something to print the error message I get for 1. bad requests and 2. no results
return(dat)
}
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, F, F)
impressions <- fb.matrix(dat)
dat
length(dat$data)
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-2", period="day")
dat3 <- fb.data(plc_list, F,F)
length(dat3)
dat3
lenght(dat)
length(dat)
length(dat$data)
length(dat3$data)
if (length(dat3$data) < 1){
print("broke!")
} else {
print("ok!")
}
if (length(dat$data) < 1){
print("broke!")
} else {
print("ok!")
}
dat
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
# add something to print the error message I get for 1. bad requests and 2. no results
if (length(dat$data) < 1){
message("Query returned no results. Try adjusting your time period. ")
} else {
return(dat$data[[1]]$values)
}
}
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, F, F)
impressions <- fb.matrix(dat)
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-2", period="day")
dat3 <- fb.data(plc_list, F,F)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-06-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
str_list <- list(metric="page_storytellers_by_age_gender", since="2016-01-01", until="2016-07-30", period="day")
dat2 <- fb.data(str_list, F, F)
stories <- fb.matrix(dat2)
source('~/Documents/r-projects/facebook/rfacebook/sample/using_fb_tool.R')
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-2", period="day")
dat3 <- fb.data(plc_list, F,F)
dat3
?readLines
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
# Accesses graph api and gets data for specified parameters.
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
# if statement here tells whether you have no results.
ifelse(length(dat$data) < 1,
message("Query returned no results. Try adjusting your time period. "),
return(dat$data[[1]]$values)
)
}
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, F, F)
impressions <- fb.matrix(dat)
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-2", period="day")
dat3 <- fb.data(plc_list, F,F)
ifelse(length(test$data) < 1, message("Broke"), message("Ok!"))
ifelse(length(dat$data) < 1, message("Broke"), message("Ok!"))
?ifelse
source('~/Documents/r-projects/facebook/rfacebook/sample/using_fb_tool.R')
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-30", period="day")
dat3 <- fb.data(plc_list, F,F)
fb.data <- function(params, req_auth = FALSE, store_auth = FALSE) {
# prompts for username/id and token
if(req_auth == TRUE){
auth <- fb.auth()
# stores username/id and token
if(store_auth == TRUE){
auth <<- auth
}
}
user <- auth[1]
token <- auth[2]
# Create Connection URL
params <- params(params)
paramStr <- paste(params, "", sep = "&", collapse = "")
connectStr <- paste('https://graph.facebook.com/v2.6/',
user, '/insights?', paramStr, "access_token=",
token, sep = "")
api_con <- URLencode(connectStr)
rd <- readLines(api_con, warn = F)
dat <- rjson::fromJSON(rd)
# if statement here tells whether you have no results.
if (length(dat$data) < 1){
message("Query returned no results. Try adjusting your time period. \n check url:")
print(connectStr)
} else {
return(dat$data[[1]]$values)
}
}
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-30", period="day")
dat3 <- fb.data(plc_list, F,F)
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2011-06-01", until="2016-06-30", period="day")
dat3 <- fb.data(plc_list, F,F)
sourceDir <- function(path, trace = TRUE, ...){
for(i in list.files(path, pattern = ".R")){
if(trace) cat(i, ":")
source(file.path(path, i), ...)
if(trace) cat("\n")
}
}
sourceDir("../R")
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, F, F)
impressions <- fb.matrix(dat)
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, F, F)
impressions <- fb.df(dat)
imp_list <- list(metric="page_impressions_by_age_gender_unique", since="2016-06-01", until="2016-07-30", period="day")
dat <- fb.data(param_list, F, F)
dat <- fb.data(param_list, T, T)
dat
impressions <- fb.df(dat)
impressions
plc_list <- list(metric="page_places_checkins_by_age_gender", since="2016-06-01", until="2016-06-30", period="day")
dat3 <- fb.data(plc_list, F,F)
dat
